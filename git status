[1mdiff --git a/main.py b/main.py[m
[1mindex 5659089..0ac50d0 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -8,8 +8,15 @@[m [mproduct_list = [products.Product("MacBook Air M2", price=1450, quantity=100),[m
 best_buy = store.Store(product_list)[m
 [m
 [m
[32m+[m[32mdef empty_str_checker(data):[m
[32m+[m[32m    # If string is empty return False.[m
[32m+[m[32m    if data == '':[m
[32m+[m[32m        return False[m
[32m+[m[32m    return True[m
[32m+[m
[32m+[m
 def start(store_object):[m
[31m-    # while loop until 'Quit' is promted[m
[32m+[m[32m    # while loop until 'Quit' is prompted[m
     while True:[m
         option = int(input('''~~~~~~~[m
     Store Catalogue[m
[36m@@ -25,39 +32,56 @@[m [mPlease choose a number: '''))[m
             # returns the list of products in the store.[m
             num = 1[m
             print("~~~~~~~")[m
[31m-            for item in best_buy.product_list:[m
[31m-                print(item.show())[m
[31m-                num += 1[m
[32m+[m[32m            for item in store_object.product_list:[m
[32m+[m[32m                if item.is_active():[m
[32m+[m[32m                    print(f"{num}. {item.show()}")[m
[32m+[m[32m                    num += 1[m
 [m
         elif option == 2:[m
             # returns the quantity of all items in store[m
[31m-            print(f"~~~~~~~\n{best_buy.get_total_quantity()} Items total in store!")[m
[32m+[m[32m            print(f"~~~~~~~\n{store_object.get_total_quantity()} items total in store!")[m
 [m
         elif option == 3:[m
             # places an order of item name and qnt.[m
             num = 1[m
             print("~~~~~~~")[m
[31m-            for item in best_buy.product_list:[m
[31m-                print(f"{num}. {item.show()}")[m
[31m-                num += 1[m
[32m+[m
[32m+[m[32m            # Displays a list of active products and assigns a num to help retrieve later.[m
[32m+[m[32m            product_list_key = [][m
[32m+[m[32m            for item in store_object.product_list:[m
[32m+[m[32m                if item.is_active():[m
[32m+[m[32m                    print(f"{num}. {item.show()}")[m
[32m+[m[32m                    num_to_item = num, item[m
[32m+[m[32m                    product_list_key.append(num_to_item)[m
[32m+[m[32m                    num += 1[m
 [m
             total = 0[m
             while True:[m
                 # Will break once no values is entered in bot inputs.[m
[31m-                item_num = input("\nWhat product you want (please enter the number associated): ")[m
[32m+[m[32m                item_num = input("\nWhat # product do you want? (leave fields empty if you'd like to checkout): ")[m
                 quantity = input("How many: ")[m
[31m-                if item_num == '' and quantity == '':[m
[32m+[m
[32m+[m[32m                if empty_str_checker(item_num) is False and empty_str_checker(quantity) is False:[m
                     print("Nothing was entered, so we will exit the order process.")[m
                     break[m
[32m+[m[32m                if empty_str_checker(item_num) is False or empty_str_checker(quantity) is False:[m
[32m+[m[32m                    print("Please ensure both fields are either empty of filled.")[m
[32m+[m[32m                    continue[m
[32m+[m
                 try:[m
[31m-                    sub_total, message = best_buy.order([(item_num, quantity)])[m
[32m+[m[32m                    item = None[m
[32m+[m[32m                    for key in product_list_key:[m
[32m+[m[32m                        if int(item_num) == key[0]:[m
[32m+[m[32m                            item = key[1][m
[32m+[m[32m                    if item is None:[m
[32m+[m[32m                        raise UnboundLocalError[m
[32m+[m[32m                    sub_total, message = store_object.order((item, int(quantity)))[m
                     print(message)[m
                     total += sub_total[m
 [m
[31m-                except ValueError:[m
[31m-                    print("Please ensure the fields are filled out as guided.")[m
[31m-                except IndexError:[m
[31m-                    print("Please only enter a number associated with a product.")[m
[32m+[m[32m                except UnboundLocalError:[m
[32m+[m[32m                    print("Invalid # was entered for product.")[m
[32m+[m
             print(f"Your total is Â£{total}")[m
 [m
         elif option == 4:[m
[1mdiff --git a/products.py b/products.py[m
[1mindex 1d8767d..dcbe91e 100644[m
[1m--- a/products.py[m
[1m+++ b/products.py[m
[36m@@ -10,11 +10,13 @@[m [mclass Product:[m
 [m
     def get_quantity(self):[m
         # Returns quantity of selected product.[m
[31m-        return float(quantity)[m
[32m+[m[32m        return float(self.quantity)[m
 [m
     def set_quantity(self, quantity):[m
         # Re-assigns a new value for products quantity[m
         self.quantity = quantity[m
[32m+[m[32m        if self.quantity <= 0:[m
[32m+[m[32m            self.deactivate()[m
 [m
     def is_active(self):[m
         # Returns products active status[m
[36m@@ -35,5 +37,8 @@[m [mclass Product:[m
     def buy(self, quantity):[m
         # Returns price of product[m
         total_price = 0[m
[32m+[m[32m        if quantity > self.quantity:[m
[32m+[m[32m            return 0.0[m
         total_price += (self.price * quantity)[m
[32m+[m[32m        self.set_quantity(self.quantity - quantity)[m
         return total_price[m
[1mdiff --git a/store.py b/store.py[m
[1mindex 801420d..1f1410e 100644[m
[1m--- a/store.py[m
[1m+++ b/store.py[m
[36m@@ -1,5 +1,3 @@[m
[31m-import products[m
[31m-[m
 class Store:[m
     # Creates new object as Store, receives a list of products to contain.[m
 [m
[36m@@ -16,7 +14,7 @@[m [mclass Store:[m
         self.product_list.remove(product)[m
 [m
     def get_total_quantity(self):[m
[31m-        # Returns total quanity of all items in store[m
[32m+[m[32m        # Returns total quantity of all items in store[m
         total = 0[m
         for product in self.product_list:[m
             total += int(product.quantity)[m
[36m@@ -26,20 +24,16 @@[m [mclass Store:[m
         # Returns a list of products that are active[m
         active_products = [][m
         for item in self.product_list:[m
[31m-            if products.Product.is_active(item) == True:[m
[32m+[m[32m            if item.is_active():[m
                 active_products.append(item.name)[m
         return active_products[m
 [m
     def order(self, shopping_list):[m
[31m-        # Returns total price of an item multiplied by its quantity[m
[31m-        total_price = 0[m
[31m-        for list_pos, qnt in shopping_list:[m
[31m-            num = self.product_list[int(list_pos) - 1][m
[31m-            if num.quantity < int(qnt):[m
[31m-                return total_price, "Quantity larger than what exists"[m
[31m-            if num.quantity <= 0:[m
[31m-                num.deactivate()[m
[31m-[m
[31m-            num.quantity -= int(qnt)[m
[31m-            total_price += int(num.price * int(qnt))[m
[31m-        return total_price, "Product added to your list!"[m
[32m+[m[32m        # Checks if there is enough product to sell, returns total price.[m
[32m+[m[32m        item, qnt = shopping_list[m
[32m+[m[32m        total_price = item.buy(qnt)[m
[32m+[m[32m        if total_price == 0.0:[m
[32m+[m[32m            message = "Quantity entered is larger than what is in stock"[m
[32m+[m[32m        else:[m
[32m+[m[32m            message = "Product added to your list!"[m
[32m+[m[32m        return total_price, message[m
